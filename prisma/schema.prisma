generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserAccess {
  user_id String     @id
  status  UserStatus @default(VALIDATING)
  role    UserRole   @default(USER)
  email   String     @unique

  email_confirmed_at   DateTime?
  student_confirmed_at DateTime?
  member_created_at    DateTime?

  member_id    Int      @unique @default(autoincrement())
  temporary_id String   @default("0000000000")
  member       Members?
}

model Members {
  member_id       Int      @id
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  familyName      String
  givenName       String
  middleName      String?
  familyNamePho   String
  givenNamePho    String
  middleNamePho   String?
  familyNameKanji String?
  givenNameKanji  String?
  middleNameKanji String?
  birthOfDate     DateTime
  nationality     String
  phoneNumber     String?
  newsLetter      Boolean  @default(false)

  user_access UserAccess @relation(fields: [member_id], references: [member_id])
  profile     Profiles?

  emails_recieved Emails[] @relation("EmailsReceived")
  emails_sent     Emails[] @relation("EmailsSent")

  student  Students?
  supports Supports[]

  friendships_requester Friendships[] @relation("Requester")
  friendships_addressee Friendships[] @relation("Addressee")
}

model Universities {
  university_id String        @id
  name_en       String
  name_jp       String
  departments   Departments[]
  students      Students[]
  posts         Posts[]
}

model Departments {
  department_id      Int          @id @default(autoincrement())
  university_id      String
  department_name_en String
  department_name_jp String?
  faculty_name_en    String
  faculty_name_jp    String?
  major_name_en      String?
  major_name_jp      String?
  university         Universities @relation(fields: [university_id], references: [university_id])
  students           Students[]
}

model Students {
  student_id    Int          @id @default(autoincrement())
  created_at    DateTime     @default(now())
  student_no    String       @unique
  student_email String       @unique
  date_of_entry DateTime     @default(now())
  code          String       @default("000000")
  trial_count   Int          @default(0)
  validated     Boolean      @default(false)
  member_id     Int?         @unique
  force         Boolean      @default(false)
  send_count    Int          @default(0)
  university_id String
  department_id Int
  discordCode   String?
  department    Departments  @relation(fields: [department_id], references: [department_id])
  member        Members?     @relation(fields: [member_id], references: [member_id])
  university    Universities @relation(fields: [university_id], references: [university_id])
}

model Supports {
  support_id   Int       @id @default(autoincrement())
  created_at   DateTime  @default(now())
  deleted_at   DateTime?
  sender_email String
  subject      String
  content      String
  sender_id    Int?
  member       Members?  @relation(fields: [sender_id], references: [member_id])
}

model Emails {
  email_id        Int       @id @default(autoincrement())
  original_id     Int?
  created_at      DateTime  @default(now())
  deleted_at      DateTime?
  reciever_email  String
  subject         String
  content         String
  sender_id       Int
  receiver_id     Int?
  receiver_member Members?  @relation("EmailsReceived", fields: [receiver_id], references: [member_id])
  sender_member   Members   @relation("EmailsSent", fields: [sender_id], references: [member_id])
}

enum UserStatus {
  VALIDATING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  GUEST
}

model Profiles {
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  username     String   @unique
  display_name String?
  description  String?
  social_media Json
  avatar_url   String   @default("default/default_male01.jpg")
  member_id    Int      @id
  member       Members  @relation(fields: [member_id], references: [member_id])
  count_post   Int      @default(0)
  count_friend Int      @default(0)

  posts    Posts[]
  comments Comments[]
  likes    Likes[]
}

model Friendships {
  friendship_id Int          @id @default(autoincrement())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  requester_id  Int
  addressee_id  Int
  status        FriendStatus @default(PENDING)

  requester Members @relation("Requester", fields: [requester_id], references: [member_id])
  addressee Members @relation("Addressee", fields: [addressee_id], references: [member_id])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

model Posts {
  post_id        String     @id @default(uuid())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  title          String
  content        String
  images         String[]
  status         PostStatus @default(DRAFT)

  profile   Profiles @relation(fields: [member_id], references: [member_id])
  member_id Int

  university    Universities @relation(fields: [university_id], references: [university_id])
  university_id String

  comments Comments[]
  likes    Likes[]
}

enum PostStatus {
  DRAFT
  PENDING
  PUBLISHED
  RESTRICTED
  ARCHIVED
  DELETED
}

model Comments {
  comment_id String        @id @default(uuid())
  content    String
  createdAt  DateTime      @default(now())
  status     CommentStatus @default(PENDING)

  post    Posts  @relation(fields: [post_id], references: [post_id])
  post_id String

  profile   Profiles @relation(fields: [member_id], references: [member_id])
  member_id Int
}

enum CommentStatus {
  PENDING
  PUBLISHED
  RESTRICTED
  DELETED
}

model Likes {
  like_id   String   @id @default(uuid())
  post      Posts    @relation(fields: [post_id], references: [post_id])
  post_id   String
  profile   Profiles @relation(fields: [member_id], references: [member_id])
  member_id Int
}
